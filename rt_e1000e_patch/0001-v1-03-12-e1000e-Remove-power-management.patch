From bc02f289f5540da33eb9371f2dd5831add08ad4f Mon Sep 17 00:00:00 2001
From: Gino Strobbe <G.Strobbe@telenet.be>
Date: Sat, 1 Jun 2024 08:21:54 +0200
Subject: [PATCH] [v1 03/12] e1000e: Remove power management

Signed-off-by: Gino Strobbe <G.Strobbe@telenet.be>
---
 kernel/drivers/net/drivers/e1000e/e1000.h   |   4 -
 kernel/drivers/net/drivers/e1000e/ethtool.c |   1 -
 kernel/drivers/net/drivers/e1000e/ich8lan.c |   1 -
 kernel/drivers/net/drivers/e1000e/netdev.c  | 573 +-------------------
 4 files changed, 1 insertion(+), 578 deletions(-)

diff --git a/kernel/drivers/net/drivers/e1000e/e1000.h b/kernel/drivers/net/drivers/e1000e/e1000.h
index ba9c19e69..e3b69d664 100644
--- a/kernel/drivers/net/drivers/e1000e/e1000.h
+++ b/kernel/drivers/net/drivers/e1000e/e1000.h
@@ -22,7 +22,6 @@
 #include <linux/mii.h>
 #include <linux/mdio.h>
 #include <linux/mutex.h>
-#include <linux/pm_qos.h>
 #include "hw.h"
 
 struct e1000_info;
@@ -329,10 +328,7 @@ struct e1000_adapter {
 	struct timecounter tc;
 	struct ptp_clock *ptp_clock;
 	struct ptp_clock_info ptp_clock_info;
-	struct pm_qos_request pm_qos_req;
 	long ptp_delta;
-
-	u16 eee_advert;
 };
 
 struct e1000_info {
diff --git a/kernel/drivers/net/drivers/e1000e/ethtool.c b/kernel/drivers/net/drivers/e1000e/ethtool.c
index dc553c51d..3c9fb07a3 100644
--- a/kernel/drivers/net/drivers/e1000e/ethtool.c
+++ b/kernel/drivers/net/drivers/e1000e/ethtool.c
@@ -10,7 +10,6 @@
 #include <linux/slab.h>
 #include <linux/delay.h>
 #include <linux/vmalloc.h>
-#include <linux/pm_runtime.h>
 
 #include "e1000.h"
 
diff --git a/kernel/drivers/net/drivers/e1000e/ich8lan.c b/kernel/drivers/net/drivers/e1000e/ich8lan.c
index f9e94be36..2fee3936a 100644
--- a/kernel/drivers/net/drivers/e1000e/ich8lan.c
+++ b/kernel/drivers/net/drivers/e1000e/ich8lan.c
@@ -1266,7 +1266,6 @@ static s32 e1000_disable_ulp_lpt_lp(struct e1000_hw *hw, bool force)
 		return 0;
 
 	if (er32(FWSM) & E1000_ICH_FWSM_FW_VALID) {
-		struct e1000_adapter *adapter = hw->adapter;
 		bool firmware_bug = false;
 
 		if (force) {
diff --git a/kernel/drivers/net/drivers/e1000e/netdev.c b/kernel/drivers/net/drivers/e1000e/netdev.c
index 513126d9e..914ca87f4 100644
--- a/kernel/drivers/net/drivers/e1000e/netdev.c
+++ b/kernel/drivers/net/drivers/e1000e/netdev.c
@@ -21,10 +21,7 @@
 #include <linux/if_vlan.h>
 #include <linux/cpu.h>
 #include <linux/smp.h>
-#include <linux/pm_qos.h>
-#include <linux/pm_runtime.h>
 #include <linux/prefetch.h>
-#include <linux/suspend.h>
 
 #include "e1000.h"
 #define CREATE_TRACE_POINTS
@@ -2482,9 +2479,6 @@ static void e1000e_set_rx_mode(struct net_device *netdev)
 	struct e1000_hw *hw = &adapter->hw;
 	u32 rctl;
 
-	if (pm_runtime_suspended(netdev->dev.parent))
-		return;
-
 	/* Check for Promiscuous and All Multicast modes */
 	rctl = er32(RCTL);
 
@@ -3210,38 +3204,6 @@ void e1000e_reset(struct e1000_adapter *adapter)
 	/* restore systim and hwtstamp settings */
 	e1000e_systim_reset(adapter);
 
-	/* Set EEE advertisement as appropriate */
-	if (adapter->flags2 & FLAG2_HAS_EEE) {
-		s32 ret_val;
-		u16 adv_addr;
-
-		switch (hw->phy.type) {
-		case e1000_phy_82579:
-			adv_addr = I82579_EEE_ADVERTISEMENT;
-			break;
-		case e1000_phy_i217:
-			adv_addr = I217_EEE_ADVERTISEMENT;
-			break;
-		default:
-			dev_err(&adapter->pdev->dev,
-				"Invalid PHY type setting EEE advertisement\n");
-			return;
-		}
-
-		ret_val = hw->phy.ops.acquire(hw);
-		if (ret_val) {
-			dev_err(&adapter->pdev->dev,
-				"EEE advertisement - unable to acquire PHY\n");
-			return;
-		}
-
-		e1000_write_emi_reg_locked(hw, adv_addr,
-					   hw->dev_spec.ich8lan.eee_disable ?
-					   0 : adapter->eee_advert);
-
-		hw->phy.ops.release(hw);
-	}
-
 	if (!netif_running(adapter->netdev) &&
 	    !test_bit(__E1000_TESTING, &adapter->state))
 		e1000_power_down_phy(adapter);
@@ -3690,15 +3652,12 @@ int e1000e_open(struct net_device *netdev)
 {
 	struct e1000_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
-	struct pci_dev *pdev = adapter->pdev;
 	int err;
 
 	/* disallow open during test */
 	if (test_bit(__E1000_TESTING, &adapter->state))
 		return -EBUSY;
 
-	pm_runtime_get_sync(&pdev->dev);
-
 	netif_carrier_off(netdev);
 	netif_stop_queue(netdev);
 
@@ -3726,9 +3685,6 @@ int e1000e_open(struct net_device *netdev)
 	if ((adapter->hw.mng_cookie.status & E1000_MNG_DHCP_COOKIE_STATUS_VLAN))
 		e1000_update_mng_vlan(adapter);
 
-	/* DMA latency requirement to workaround jumbo issue */
-	cpu_latency_qos_add_request(&adapter->pm_qos_req, PM_QOS_DEFAULT_VALUE);
-
 	/* before we allocate an interrupt, we must be ready to handle it.
 	 * Setting DEBUG_SHIRQ in the kernel makes it fire an interrupt
 	 * as soon as we call pci_request_irq, so we have to setup our
@@ -3762,14 +3718,12 @@ int e1000e_open(struct net_device *netdev)
 	adapter->tx_hang_recheck = false;
 
 	hw->mac.get_link_status = true;
-	pm_runtime_put(&pdev->dev);
 
 	e1000e_trigger_lsc(adapter);
 
 	return 0;
 
 err_req_irq:
-	cpu_latency_qos_remove_request(&adapter->pm_qos_req);
 	e1000e_release_hw_control(adapter);
 	e1000_power_down_phy(adapter);
 	e1000e_free_rx_resources(adapter->rx_ring);
@@ -3777,7 +3731,6 @@ err_setup_rx:
 	e1000e_free_tx_resources(adapter->tx_ring);
 err_setup_tx:
 	e1000e_reset(adapter);
-	pm_runtime_put_sync(&pdev->dev);
 
 	return err;
 }
@@ -3796,7 +3749,6 @@ err_setup_tx:
 int e1000e_close(struct net_device *netdev)
 {
 	struct e1000_adapter *adapter = netdev_priv(netdev);
-	struct pci_dev *pdev = adapter->pdev;
 	int count = E1000_CHECK_RESET_COUNT;
 
 	while (test_bit(__E1000_RESETTING, &adapter->state) && count--)
@@ -3804,8 +3756,6 @@ int e1000e_close(struct net_device *netdev)
 
 	WARN_ON(test_bit(__E1000_RESETTING, &adapter->state));
 
-	pm_runtime_get_sync(&pdev->dev);
-
 	if (netif_device_present(netdev)) {
 		e1000e_down(adapter, true);
 		e1000_free_irq(adapter);
@@ -3833,10 +3783,6 @@ int e1000e_close(struct net_device *netdev)
 	    !test_bit(__E1000_TESTING, &adapter->state))
 		e1000e_release_hw_control(adapter);
 
-	cpu_latency_qos_remove_request(&adapter->pm_qos_req);
-
-	pm_runtime_put_sync(&pdev->dev);
-
 	return 0;
 }
 
@@ -4082,8 +4028,7 @@ static void e1000_phy_read_status(struct e1000_adapter *adapter)
 	struct e1000_hw *hw = &adapter->hw;
 	struct e1000_phy_regs *phy = &adapter->phy_regs;
 
-	if (!pm_runtime_suspended((&adapter->pdev->dev)->parent) &&
-	    (er32(STATUS) & E1000_STATUS_LU) &&
+	if ((er32(STATUS) & E1000_STATUS_LU) &&
 	    (adapter->hw.phy.media_type == e1000_media_type_copper)) {
 		int ret_val;
 
@@ -4236,8 +4181,6 @@ static void e1000_watchdog_task(struct work_struct *work)
 
 	link = e1000e_has_link(adapter);
 	if ((netif_carrier_ok(netdev)) && link) {
-		/* Cancel scheduled suspend requests. */
-		pm_runtime_resume(netdev->dev.parent);
 
 		e1000e_enable_receives(adapter);
 		goto link_up;
@@ -4251,9 +4194,6 @@ static void e1000_watchdog_task(struct work_struct *work)
 		if (!netif_carrier_ok(netdev)) {
 			bool txb2b = true;
 
-			/* Cancel scheduled suspend requests. */
-			pm_runtime_resume(netdev->dev.parent);
-
 			/* Checking if MAC is in DMoff state*/
 			if (er32(FWSM) & E1000_ICH_FWSM_FW_VALID) {
 				pcim_state = er32(STATUS);
@@ -4364,9 +4304,6 @@ static void e1000_watchdog_task(struct work_struct *work)
 			 */
 			if (adapter->flags & FLAG_RX_NEEDS_RESTART)
 				adapter->flags |= FLAG_RESTART_NOW;
-			else
-				pm_schedule_suspend(netdev->dev.parent,
-						    LINK_TIMEOUT);
 		}
 	}
 
@@ -5013,286 +4950,6 @@ release:
 	return retval;
 }
 
-/* S0ix implementation */
-static void e1000e_s0ix_entry_flow(struct e1000_adapter *adapter)
-{
-	struct e1000_hw *hw = &adapter->hw;
-	u32 mac_data;
-	u16 phy_data;
-
-	if (er32(FWSM) & E1000_ICH_FWSM_FW_VALID &&
-	    hw->mac.type >= e1000_pch_adp) {
-		/* Request ME configure the device for S0ix */
-		mac_data = er32(H2ME);
-		mac_data |= E1000_H2ME_START_DPG;
-		mac_data &= ~E1000_H2ME_EXIT_DPG;
-		trace_e1000e_trace_mac_register(mac_data);
-		ew32(H2ME, mac_data);
-	} else {
-		/* Request driver configure the device to S0ix */
-		/* Disable the periodic inband message,
-		 * don't request PCIe clock in K1 page770_17[10:9] = 10b
-		 */
-		e1e_rphy(hw, HV_PM_CTRL, &phy_data);
-		phy_data &= ~HV_PM_CTRL_K1_CLK_REQ;
-		phy_data |= BIT(10);
-		e1e_wphy(hw, HV_PM_CTRL, phy_data);
-
-		/* Make sure we don't exit K1 every time a new packet arrives
-		 * 772_29[5] = 1 CS_Mode_Stay_In_K1
-		 */
-		e1e_rphy(hw, I217_CGFREG, &phy_data);
-		phy_data |= BIT(5);
-		e1e_wphy(hw, I217_CGFREG, phy_data);
-
-		/* Change the MAC/PHY interface to SMBus
-		 * Force the SMBus in PHY page769_23[0] = 1
-		 * Force the SMBus in MAC CTRL_EXT[11] = 1
-		 */
-		e1e_rphy(hw, CV_SMB_CTRL, &phy_data);
-		phy_data |= CV_SMB_CTRL_FORCE_SMBUS;
-		e1e_wphy(hw, CV_SMB_CTRL, phy_data);
-		mac_data = er32(CTRL_EXT);
-		mac_data |= E1000_CTRL_EXT_FORCE_SMBUS;
-		ew32(CTRL_EXT, mac_data);
-
-		/* DFT control: PHY bit: page769_20[0] = 1
-		 * page769_20[7] - PHY PLL stop
-		 * page769_20[8] - PHY go to the electrical idle
-		 * page769_20[9] - PHY serdes disable
-		 * Gate PPW via EXTCNF_CTRL - set 0x0F00[7] = 1
-		 */
-		e1e_rphy(hw, I82579_DFT_CTRL, &phy_data);
-		phy_data |= BIT(0);
-		phy_data |= BIT(7);
-		phy_data |= BIT(8);
-		phy_data |= BIT(9);
-		e1e_wphy(hw, I82579_DFT_CTRL, phy_data);
-
-		mac_data = er32(EXTCNF_CTRL);
-		mac_data |= E1000_EXTCNF_CTRL_GATE_PHY_CFG;
-		ew32(EXTCNF_CTRL, mac_data);
-
-		/* Enable the Dynamic Power Gating in the MAC */
-		mac_data = er32(FEXTNVM7);
-		mac_data |= BIT(22);
-		ew32(FEXTNVM7, mac_data);
-
-		/* Disable disconnected cable conditioning for Power Gating */
-		mac_data = er32(DPGFR);
-		mac_data |= BIT(2);
-		ew32(DPGFR, mac_data);
-
-		/* Don't wake from dynamic Power Gating with clock request */
-		mac_data = er32(FEXTNVM12);
-		mac_data |= BIT(12);
-		ew32(FEXTNVM12, mac_data);
-
-		/* Ungate PGCB clock */
-		mac_data = er32(FEXTNVM9);
-		mac_data &= ~BIT(28);
-		ew32(FEXTNVM9, mac_data);
-
-		/* Enable K1 off to enable mPHY Power Gating */
-		mac_data = er32(FEXTNVM6);
-		mac_data |= BIT(31);
-		ew32(FEXTNVM6, mac_data);
-
-		/* Enable mPHY power gating for any link and speed */
-		mac_data = er32(FEXTNVM8);
-		mac_data |= BIT(9);
-		ew32(FEXTNVM8, mac_data);
-
-		/* Enable the Dynamic Clock Gating in the DMA and MAC */
-		mac_data = er32(CTRL_EXT);
-		mac_data |= E1000_CTRL_EXT_DMA_DYN_CLK_EN;
-		ew32(CTRL_EXT, mac_data);
-
-		/* No MAC DPG gating SLP_S0 in modern standby
-		 * Switch the logic of the lanphypc to use PMC counter
-		 */
-		mac_data = er32(FEXTNVM5);
-		mac_data |= BIT(7);
-		ew32(FEXTNVM5, mac_data);
-	}
-
-	/* Disable the time synchronization clock */
-	mac_data = er32(FEXTNVM7);
-	mac_data |= BIT(31);
-	mac_data &= ~BIT(0);
-	ew32(FEXTNVM7, mac_data);
-
-	/* Dynamic Power Gating Enable */
-	mac_data = er32(CTRL_EXT);
-	mac_data |= BIT(3);
-	ew32(CTRL_EXT, mac_data);
-
-	/* Check MAC Tx/Rx packet buffer pointers.
-	 * Reset MAC Tx/Rx packet buffer pointers to suppress any
-	 * pending traffic indication that would prevent power gating.
-	 */
-	mac_data = er32(TDFH);
-	if (mac_data)
-		ew32(TDFH, 0);
-	mac_data = er32(TDFT);
-	if (mac_data)
-		ew32(TDFT, 0);
-	mac_data = er32(TDFHS);
-	if (mac_data)
-		ew32(TDFHS, 0);
-	mac_data = er32(TDFTS);
-	if (mac_data)
-		ew32(TDFTS, 0);
-	mac_data = er32(TDFPC);
-	if (mac_data)
-		ew32(TDFPC, 0);
-	mac_data = er32(RDFH);
-	if (mac_data)
-		ew32(RDFH, 0);
-	mac_data = er32(RDFT);
-	if (mac_data)
-		ew32(RDFT, 0);
-	mac_data = er32(RDFHS);
-	if (mac_data)
-		ew32(RDFHS, 0);
-	mac_data = er32(RDFTS);
-	if (mac_data)
-		ew32(RDFTS, 0);
-	mac_data = er32(RDFPC);
-	if (mac_data)
-		ew32(RDFPC, 0);
-}
-
-static void e1000e_s0ix_exit_flow(struct e1000_adapter *adapter)
-{
-	struct e1000_hw *hw = &adapter->hw;
-	bool firmware_bug = false;
-	u32 mac_data;
-	u16 phy_data;
-	u32 i = 0;
-
-	if (er32(FWSM) & E1000_ICH_FWSM_FW_VALID &&
-	    hw->mac.type >= e1000_pch_adp) {
-		/* Keep the GPT clock enabled for CSME */
-		mac_data = er32(FEXTNVM);
-		mac_data |= BIT(3);
-		ew32(FEXTNVM, mac_data);
-		/* Request ME unconfigure the device from S0ix */
-		mac_data = er32(H2ME);
-		mac_data &= ~E1000_H2ME_START_DPG;
-		mac_data |= E1000_H2ME_EXIT_DPG;
-		trace_e1000e_trace_mac_register(mac_data);
-		ew32(H2ME, mac_data);
-
-		/* Poll up to 2.5 seconds for ME to unconfigure DPG.
-		 * If this takes more than 1 second, show a warning indicating a
-		 * firmware bug
-		 */
-		while (!(er32(EXFWSM) & E1000_EXFWSM_DPG_EXIT_DONE)) {
-			if (i > 100 && !firmware_bug)
-				firmware_bug = true;
-
-			if (i++ == 250) {
-				e_dbg("Timeout (firmware bug): %d msec\n",
-				      i * 10);
-				break;
-			}
-
-			usleep_range(10000, 11000);
-		}
-		if (firmware_bug)
-			e_warn("DPG_EXIT_DONE took %d msec. This is a firmware bug\n",
-			       i * 10);
-		else
-			e_dbg("DPG_EXIT_DONE cleared after %d msec\n", i * 10);
-	} else {
-		/* Request driver unconfigure the device from S0ix */
-
-		/* Disable the Dynamic Power Gating in the MAC */
-		mac_data = er32(FEXTNVM7);
-		mac_data &= 0xFFBFFFFF;
-		ew32(FEXTNVM7, mac_data);
-
-		/* Disable mPHY power gating for any link and speed */
-		mac_data = er32(FEXTNVM8);
-		mac_data &= ~BIT(9);
-		ew32(FEXTNVM8, mac_data);
-
-		/* Disable K1 off */
-		mac_data = er32(FEXTNVM6);
-		mac_data &= ~BIT(31);
-		ew32(FEXTNVM6, mac_data);
-
-		/* Disable Ungate PGCB clock */
-		mac_data = er32(FEXTNVM9);
-		mac_data |= BIT(28);
-		ew32(FEXTNVM9, mac_data);
-
-		/* Cancel not waking from dynamic
-		 * Power Gating with clock request
-		 */
-		mac_data = er32(FEXTNVM12);
-		mac_data &= ~BIT(12);
-		ew32(FEXTNVM12, mac_data);
-
-		/* Cancel disable disconnected cable conditioning
-		 * for Power Gating
-		 */
-		mac_data = er32(DPGFR);
-		mac_data &= ~BIT(2);
-		ew32(DPGFR, mac_data);
-
-		/* Disable the Dynamic Clock Gating in the DMA and MAC */
-		mac_data = er32(CTRL_EXT);
-		mac_data &= 0xFFF7FFFF;
-		ew32(CTRL_EXT, mac_data);
-
-		/* Revert the lanphypc logic to use the internal Gbe counter
-		 * and not the PMC counter
-		 */
-		mac_data = er32(FEXTNVM5);
-		mac_data &= 0xFFFFFF7F;
-		ew32(FEXTNVM5, mac_data);
-
-		/* Enable the periodic inband message,
-		 * Request PCIe clock in K1 page770_17[10:9] =01b
-		 */
-		e1e_rphy(hw, HV_PM_CTRL, &phy_data);
-		phy_data &= 0xFBFF;
-		phy_data |= HV_PM_CTRL_K1_CLK_REQ;
-		e1e_wphy(hw, HV_PM_CTRL, phy_data);
-
-		/* Return back configuration
-		 * 772_29[5] = 0 CS_Mode_Stay_In_K1
-		 */
-		e1e_rphy(hw, I217_CGFREG, &phy_data);
-		phy_data &= 0xFFDF;
-		e1e_wphy(hw, I217_CGFREG, phy_data);
-
-		/* Change the MAC/PHY interface to Kumeran
-		 * Unforce the SMBus in PHY page769_23[0] = 0
-		 * Unforce the SMBus in MAC CTRL_EXT[11] = 0
-		 */
-		e1e_rphy(hw, CV_SMB_CTRL, &phy_data);
-		phy_data &= ~CV_SMB_CTRL_FORCE_SMBUS;
-		e1e_wphy(hw, CV_SMB_CTRL, phy_data);
-		mac_data = er32(CTRL_EXT);
-		mac_data &= ~E1000_CTRL_EXT_FORCE_SMBUS;
-		ew32(CTRL_EXT, mac_data);
-	}
-
-	/* Disable Dynamic Power Gating */
-	mac_data = er32(CTRL_EXT);
-	mac_data &= 0xFFFFFFF7;
-	ew32(CTRL_EXT, mac_data);
-
-	/* Enable the time synchronization clock */
-	mac_data = er32(FEXTNVM7);
-	mac_data &= ~BIT(31);
-	mac_data |= BIT(0);
-	ew32(FEXTNVM7, mac_data);
-}
-
 static int e1000e_pm_freeze(struct device *dev)
 {
 	struct net_device *netdev = dev_get_drvdata(dev);
@@ -5426,34 +5083,6 @@ static int __e1000_shutdown(struct pci_dev *pdev, bool runtime)
 		ew32(CTRL_EXT, ctrl_ext);
 	}
 
-	/* Ensure that the appropriate bits are set in LPI_CTRL
-	 * for EEE in Sx
-	 */
-	if ((hw->phy.type >= e1000_phy_i217) &&
-	    adapter->eee_advert && hw->dev_spec.ich8lan.eee_lp_ability) {
-		u16 lpi_ctrl = 0;
-
-		retval = hw->phy.ops.acquire(hw);
-		if (!retval) {
-			retval = e1e_rphy_locked(hw, I82579_LPI_CTRL,
-						 &lpi_ctrl);
-			if (!retval) {
-				if (adapter->eee_advert &
-				    hw->dev_spec.ich8lan.eee_lp_ability &
-				    I82579_EEE_100_SUPPORTED)
-					lpi_ctrl |= I82579_LPI_CTRL_100_ENABLE;
-				if (adapter->eee_advert &
-				    hw->dev_spec.ich8lan.eee_lp_ability &
-				    I82579_EEE_1000_SUPPORTED)
-					lpi_ctrl |= I82579_LPI_CTRL_1000_ENABLE;
-
-				retval = e1e_wphy_locked(hw, I82579_LPI_CTRL,
-							 lpi_ctrl);
-			}
-		}
-		hw->phy.ops.release(hw);
-	}
-
 	/* Release control of h/w to f/w.  If f/w is AMT enabled, this
 	 * would have already happened in close and is redundant.
 	 */
@@ -5613,177 +5242,6 @@ err_irq:
 	return rc;
 }
 
-static int __e1000_resume(struct pci_dev *pdev)
-{
-	struct net_device *netdev = pci_get_drvdata(pdev);
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-	struct e1000_hw *hw = &adapter->hw;
-	u16 aspm_disable_flag = 0;
-
-	if (adapter->flags2 & FLAG2_DISABLE_ASPM_L0S)
-		aspm_disable_flag = PCIE_LINK_STATE_L0S;
-	if (adapter->flags2 & FLAG2_DISABLE_ASPM_L1)
-		aspm_disable_flag |= PCIE_LINK_STATE_L1;
-	if (aspm_disable_flag)
-		e1000e_disable_aspm(pdev, aspm_disable_flag);
-
-	pci_set_master(pdev);
-
-	if (hw->mac.type >= e1000_pch2lan)
-		e1000_resume_workarounds_pchlan(&adapter->hw);
-
-	e1000e_power_up_phy(adapter);
-
-	/* report the system wakeup cause from S3/S4 */
-	if (adapter->flags2 & FLAG2_HAS_PHY_WAKEUP) {
-		u16 phy_data;
-
-		e1e_rphy(&adapter->hw, BM_WUS, &phy_data);
-		if (phy_data) {
-			e_info("PHY Wakeup cause - %s\n",
-			       phy_data & E1000_WUS_EX ? "Unicast Packet" :
-			       phy_data & E1000_WUS_MC ? "Multicast Packet" :
-			       phy_data & E1000_WUS_BC ? "Broadcast Packet" :
-			       phy_data & E1000_WUS_MAG ? "Magic Packet" :
-			       phy_data & E1000_WUS_LNKC ?
-			       "Link Status Change" : "other");
-		}
-		e1e_wphy(&adapter->hw, BM_WUS, ~0);
-	} else {
-		u32 wus = er32(WUS);
-
-		if (wus) {
-			e_info("MAC Wakeup cause - %s\n",
-			       wus & E1000_WUS_EX ? "Unicast Packet" :
-			       wus & E1000_WUS_MC ? "Multicast Packet" :
-			       wus & E1000_WUS_BC ? "Broadcast Packet" :
-			       wus & E1000_WUS_MAG ? "Magic Packet" :
-			       wus & E1000_WUS_LNKC ? "Link Status Change" :
-			       "other");
-		}
-		ew32(WUS, ~0);
-	}
-
-	e1000e_reset(adapter);
-
-	e1000_init_manageability_pt(adapter);
-
-	/* If the controller has AMT, do not set DRV_LOAD until the interface
-	 * is up.  For all other cases, let the f/w know that the h/w is now
-	 * under the control of the driver.
-	 */
-	if (!(adapter->flags & FLAG_HAS_AMT))
-		e1000e_get_hw_control(adapter);
-
-	return 0;
-}
-
-static __maybe_unused int e1000e_pm_prepare(struct device *dev)
-{
-	return pm_runtime_suspended(dev) &&
-		pm_suspend_via_firmware();
-}
-
-static __maybe_unused int e1000e_pm_suspend(struct device *dev)
-{
-	struct net_device *netdev = pci_get_drvdata(to_pci_dev(dev));
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-	struct pci_dev *pdev = to_pci_dev(dev);
-	int rc;
-
-	e1000e_pm_freeze(dev);
-
-	rc = __e1000_shutdown(pdev, false);
-	if (rc) {
-		e1000e_pm_thaw(dev);
-	} else {
-		/* Introduce S0ix implementation */
-		if (adapter->flags2 & FLAG2_ENABLE_S0IX_FLOWS)
-			e1000e_s0ix_entry_flow(adapter);
-	}
-
-	return rc;
-}
-
-static __maybe_unused int e1000e_pm_resume(struct device *dev)
-{
-	struct net_device *netdev = pci_get_drvdata(to_pci_dev(dev));
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-	struct pci_dev *pdev = to_pci_dev(dev);
-	int rc;
-
-	/* Introduce S0ix implementation */
-	if (adapter->flags2 & FLAG2_ENABLE_S0IX_FLOWS)
-		e1000e_s0ix_exit_flow(adapter);
-
-	rc = __e1000_resume(pdev);
-	if (rc)
-		return rc;
-
-	return e1000e_pm_thaw(dev);
-}
-
-static __maybe_unused int e1000e_pm_runtime_idle(struct device *dev)
-{
-	struct net_device *netdev = dev_get_drvdata(dev);
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-	u16 eee_lp;
-
-	eee_lp = adapter->hw.dev_spec.ich8lan.eee_lp_ability;
-
-	if (!e1000e_has_link(adapter)) {
-		adapter->hw.dev_spec.ich8lan.eee_lp_ability = eee_lp;
-		pm_schedule_suspend(dev, 5 * MSEC_PER_SEC);
-	}
-
-	return -EBUSY;
-}
-
-static __maybe_unused int e1000e_pm_runtime_resume(struct device *dev)
-{
-	struct pci_dev *pdev = to_pci_dev(dev);
-	struct net_device *netdev = pci_get_drvdata(pdev);
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-	int rc;
-
-	pdev->pme_poll = true;
-
-	rc = __e1000_resume(pdev);
-	if (rc)
-		return rc;
-
-	if (netdev->flags & IFF_UP)
-		e1000e_up(adapter);
-
-	return rc;
-}
-
-static __maybe_unused int e1000e_pm_runtime_suspend(struct device *dev)
-{
-	struct pci_dev *pdev = to_pci_dev(dev);
-	struct net_device *netdev = pci_get_drvdata(pdev);
-	struct e1000_adapter *adapter = netdev_priv(netdev);
-
-	if (netdev->flags & IFF_UP) {
-		int count = E1000_CHECK_RESET_COUNT;
-
-		while (test_bit(__E1000_RESETTING, &adapter->state) && count--)
-			usleep_range(10000, 11000);
-
-		WARN_ON(test_bit(__E1000_RESETTING, &adapter->state));
-
-		/* Down the device without resetting the hardware */
-		e1000e_down(adapter, false);
-	}
-
-	if (__e1000_shutdown(pdev, true)) {
-		e1000e_pm_runtime_resume(dev);
-		return -EBUSY;
-	}
-
-	return 0;
-}
-
 static void e1000_shutdown(struct pci_dev *pdev)
 {
 	e1000e_pm_freeze(&pdev->dev);
@@ -6046,10 +5504,6 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 			goto err_flashmap;
 	}
 
-	/* Set default EEE advertisement */
-	if (adapter->flags2 & FLAG2_HAS_EEE)
-		adapter->eee_advert = MDIO_EEE_100TX | MDIO_EEE_1000T;
-
 	/* construct the net_device struct */
 	netdev->netdev_ops = &e1000e_netdev_ops;
 	e1000e_set_ethtool_ops(netdev);
@@ -6287,11 +5741,6 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	e1000_print_device_info(adapter);
 
-	dev_pm_set_driver_flags(&pdev->dev, DPM_FLAG_SMART_PREPARE);
-
-	if (pci_dev_run_wake(pdev))
-		pm_runtime_put_noidle(&pdev->dev);
-
 	return 0;
 
 err_register:
@@ -6358,9 +5807,6 @@ static void e1000_remove(struct pci_dev *pdev)
 
 	unregister_netdev(netdev);
 
-	if (pci_dev_run_wake(pdev))
-		pm_runtime_get_noresume(&pdev->dev);
-
 	/* Release control of h/w to f/w.  If f/w is AMT enabled, this
 	 * would have already happened in close and is redundant.
 	 */
@@ -6525,29 +5971,12 @@ static const struct pci_device_id e1000_pci_tbl[] = {
 };
 MODULE_DEVICE_TABLE(pci, e1000_pci_tbl);
 
-static const struct dev_pm_ops e1000_pm_ops = {
-#ifdef CONFIG_PM_SLEEP
-	.prepare	= e1000e_pm_prepare,
-	.suspend	= e1000e_pm_suspend,
-	.resume		= e1000e_pm_resume,
-	.freeze		= e1000e_pm_freeze,
-	.thaw		= e1000e_pm_thaw,
-	.poweroff	= e1000e_pm_suspend,
-	.restore	= e1000e_pm_resume,
-#endif
-	SET_RUNTIME_PM_OPS(e1000e_pm_runtime_suspend, e1000e_pm_runtime_resume,
-			   e1000e_pm_runtime_idle)
-};
-
 /* PCI Device API Driver */
 static struct pci_driver e1000_driver = {
 	.name     = e1000e_driver_name,
 	.id_table = e1000_pci_tbl,
 	.probe    = e1000_probe,
 	.remove   = e1000_remove,
-	.driver   = {
-		.pm = &e1000_pm_ops,
-	},
 	.shutdown = e1000_shutdown,
 	.err_handler = &e1000_err_handler
 };
-- 
2.39.2

