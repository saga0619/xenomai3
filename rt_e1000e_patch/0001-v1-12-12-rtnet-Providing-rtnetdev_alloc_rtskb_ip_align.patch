From 321b9b916e29534c6531cdd70ca0dc8dab3f345e Mon Sep 17 00:00:00 2001
From: Gino Strobbe <G.Strobbe@telenet.be>
Date: Sat, 13 Jul 2019 11:56:40 +0200
Subject: [PATCH] [v1 12/12] rtnet: Providing rtnetdev_alloc_rtskb_ip_align()

Signed-off-by: Gino Strobbe <G.Strobbe@telenet.be>
---
 kernel/drivers/net/stack/include/rtdev.h |  2 ++
 kernel/drivers/net/stack/rtdev.c         | 59 ++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/kernel/drivers/net/stack/include/rtdev.h b/kernel/drivers/net/stack/include/rtdev.h
index 8d37b6709..d859cc7bd 100644
--- a/kernel/drivers/net/stack/include/rtdev.h
+++ b/kernel/drivers/net/stack/include/rtdev.h
@@ -248,6 +248,8 @@ int rtdev_map_rtskb(struct rtskb *skb);
 void rtdev_unmap_rtskb(struct rtskb *skb);
 
 struct rtskb *rtnetdev_alloc_rtskb(struct rtnet_device *dev, unsigned int size);
+struct rtskb *rtnetdev_alloc_rtskb_ip_align(struct rtnet_device *rtdev,
+		unsigned int length, gfp_t gfp);
 
 #define rtnetdev_priv(dev) ((dev)->priv)
 
diff --git a/kernel/drivers/net/stack/rtdev.c b/kernel/drivers/net/stack/rtdev.c
index 93a8e212b..41dfe9f44 100644
--- a/kernel/drivers/net/stack/rtdev.c
+++ b/kernel/drivers/net/stack/rtdev.c
@@ -78,6 +78,65 @@ struct rtskb *rtnetdev_alloc_rtskb(struct rtnet_device *rtdev, unsigned int size
 }
 EXPORT_SYMBOL_GPL(rtnetdev_alloc_rtskb);
 
+/*
+ * CPUs often take a performance hit when accessing unaligned memory
+ * locations. The actual performance hit varies, it can be small if the
+ * hardware handles it or large if we have to take an exception and fix it
+ * in software.
+ *
+ * Since an ethernet header is 14 bytes network drivers often end up with
+ * the IP header at an unaligned offset. The IP header can be aligned by
+ * shifting the start of the packet by 2 bytes. Drivers should do this
+ * with:
+ *
+ * skb_reserve(skb, NET_IP_ALIGN);
+ *
+ * The downside to this alignment of the IP header is that the DMA is now
+ * unaligned. On some architectures the cost of an unaligned DMA is high
+ * and this cost outweighs the gains made by aligning the IP header.
+ *
+ * Since this trade off varies between architectures, we allow NET_IP_ALIGN
+ * to be overridden.
+ */
+#ifndef NET_IP_ALIGN
+#define NET_IP_ALIGN	2
+#endif
+
+/*
+ * The networking layer reserves some headroom in skb data (via
+ * dev_alloc_skb). This is used to avoid having to reallocate skb data when
+ * the header has to grow. In the default case, if the header has to grow
+ * 32 bytes or less we avoid the reallocation.
+ *
+ * Unfortunately this headroom changes the DMA alignment of the resulting
+ * network packet. As for NET_IP_ALIGN, this unaligned DMA is expensive
+ * on some architectures. An architecture can override this value,
+ * perhaps setting it to a cacheline in size (since that will maintain
+ * cacheline alignment of the DMA). It must be a power of 2.
+ *
+ * Various parts of the networking layer expect at least 32 bytes of
+ * headroom, you should not reduce this.
+ *
+ * Using max(32, L1_CACHE_BYTES) makes sense (especially with RPS)
+ * to reduce average number of cache lines per packet.
+ * get_rps_cpus() for example only access one 64 bytes aligned block :
+ * NET_IP_ALIGN(2) + ethernet_header(14) + IP_header(20/40) + ports(8)
+ */
+#ifndef NET_SKB_PAD
+#define NET_SKB_PAD	max(32, L1_CACHE_BYTES)
+#endif
+
+struct rtskb *rtnetdev_alloc_rtskb_ip_align(struct rtnet_device *rtdev,
+		unsigned int length, gfp_t gfp)
+{
+	struct rtskb *rtskb = rtnetdev_alloc_rtskb(rtdev, length + NET_IP_ALIGN);
+
+	if (NET_IP_ALIGN && rtskb)
+		rtskb_reserve(rtskb, NET_IP_ALIGN);
+	return rtskb;
+}
+EXPORT_SYMBOL_GPL(rtnetdev_alloc_rtskb_ip_align);
+
 /***
  *  __rtdev_get_by_name - find a rtnet_device by its name
  *  @name: name to find
-- 
2.11.0

